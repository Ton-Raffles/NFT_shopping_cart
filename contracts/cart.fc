#include "imports/stdlib.fc";
#include "constants.fc";

global cell data::nfts;
global slice data::owner_address;
global int data::left;

global int context::op;
global int context::query_id;
global slice context::sender;

(slice, slice, int) dict_get_next?(cell dict, int key_len, slice pivot) asm(pivot dict key_len -> 1 0 2) "DICTGETNEXT" "NULLSWAPIFNOT2";
(slice, slice, int) dict_get_min?(cell dict, int key_len) asm (-> 1 0 2) "DICTMIN" "NULLSWAPIFNOT2";

() load_data() impure {
    slice ds = get_data().begin_parse();
    data::nfts = ds~load_dict();
    data::owner_address = ds~load_msg_addr();
    data::left = ds~load_uint(8);
}

() save_data() impure {
    set_data(begin_cell()
        .store_dict(data::nfts)
        .store_slice(data::owner_address)
        .store_uint(data::left, 8)
    .end_cell());
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_bits() < 96) {
        return ();
    }

    context::op = in_msg_body~load_uint(32);
    context::query_id = in_msg_body~load_uint(64);
    (_, context::sender) = in_msg_full.begin_parse().skip_bits(4).load_msg_addr();

    load_data();

    if (context::op == op::buy) {
        throw_unless(error::incorrect_sender_address, equal_slices(context::sender, data::owner_address));

        (slice key, slice val, int flag) = data::nfts.dict_get_min?(267);
        while (flag) {
            send_raw_message(begin_cell()
                .store_uint(0x18, 6)
                .store_slice(key)
                .store_slice(val)
                .store_uint(0, 107)
                .store_uint(2, 32)
                .store_uint(context::query_id, 64)
            .end_cell(), 1);
            data::left += 1;

            (key, val, flag) = data::nfts.dict_get_next?(267, key);
        }

        raw_reserve(10000000, 2);

        send_raw_message(begin_cell()
                .store_uint(0x18, 6)
                .store_slice(data::owner_address)
                .store_coins(0)
                .store_uint(0, 107)
                .store_uint(123, 32)
            .end_cell(), 128);
    }
    
    elseif (context::op == op::ownership_assigned) {
        send_raw_message(begin_cell()
            .store_uint(0x18, 6)
            .store_slice(context::sender)
            .store_coins(10000000)
            .store_uint(0, 107)
            .store_uint(op::transfer, 32)
            .store_uint(context::query_id, 64)
            .store_slice(data::owner_address)
            .store_uint(0, 8)
        .end_cell(), 1);
        data::left -= 1;
    }
    
    elseif (context::op == op::bounced) {
        send_raw_message(begin_cell()
            .store_uint(0x18, 6)
            .store_slice(data::owner_address)
            .store_coins(0)
            .store_uint(0, 107)
        .end_cell(), 64);
        data::left -= 1;
    }

    else {
        throw(0xffff);
    }

    if (data::left <= 0) {
        send_raw_message(begin_cell()
            .store_uint(0x10, 6)
            .store_slice(data::owner_address)
            .store_coins(0)
            .store_uint(0, 107)
        .end_cell(), 160);
    } else {
        save_data();
    }
}
